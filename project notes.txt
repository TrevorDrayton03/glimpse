####### TODO #######
- edit each image (jan 15th code) as part of uploading 
- user input for left eye, right eye, cup ratio as part of uploading
- GOPRO API https://github.com/KonradIT/goprowifihack?tab=readme-ov-file
- deployment onto a container which will go onto brendan's commputer
- temporary storage
- upload with message confirmation 3.24
- do i need to use an apache server at the end of the day or can i use the django default server?
- register functionality does not work
####################

install python 3 stable release for your OS

pip install django htmx.org libapache2-mod-wsgi-py3

django-admin startproject capstone_UI

if the application was not created in the project, use python manage.py startapp capstone_UI_app to create it 

python manage.py runserver

include HTMX into the HTML Templates <head>
    <!-- Include HTMX JavaScript -->
    <script src="https://cdn.jsdelivr.net/npm/htmx.org@latest/dist/htmx.js"></script>

    <!-- Include HTMX CSS (optional) -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/htmx.org@latest/dist/htmx.css">

########## LOGIN / AUTHENTICATION ##########
include the following code in settings.py
    AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    ]

    LOGIN_URL = '/login/'

    LOGIN_REDIRECT_URL = '/home/'

    in models:
    class UserProfile(AbstractUser):
        def __str__(self):
            return self.username

########## IMAGE UPLOADING ##########
create a UserImage model for images
    from django.db import models
    from django.contrib.auth.models import User 

    class UserImage(models.Model):
        user = models.ForeignKey(User, on_delete=models.CASCADE)
        image = models.ImageField(upload_to='user_images/') # this requires pillows to be installed

########## URLS ##########
add to urls.py
    from capstone_UI_app import views
    urlpatterns = [
        path('', views.home_view, name='home')
    ]

########## DJANGO ADMINISTRATION ########## 

python manage.py createsuperuser

########## DB TABLES ##########
python manage.py makemigrations
python manage.py migrate

########## STATIC FILES FOR PRODUCTION ##########
python manage.py collectstatic

###### QUERY DB ######
python manage.py shell

from your_app.models import UploadedImage
UploadedImage.objects.all()

###### REGISTER MODEL TO ADMIN SITE ######
// admin.py
from django.contrib import admin
from .models import UploadedImage

admin.site.register(UploadedImage)

############ docker related commands
pip freeze > requirements.txt
docker-compose up --build

########## github container registry commands
docker login --username trevordrayton03 --password secret_token ghcr.io
docker tag python:django-container ghcr.io/trevordrayton03/capstone_ui:django-container
docker push ghcr.io/trevordrayton03/capstone_ui:django-container
docker image ls
docker image rm first_3_digits_of_image --force
docker run -it --rm ghcr.io/trevordrayton03/capstone_ui:django-container /bin/bash

############ laptop create docker serve app using development server in container
docker run -it --rm python:3.11 /bin/sh

// laptop, creating the container for use
docker cp /path/to/host/directory my_container:/path/inside/container/
docker cp C:\Users\trevd\OneDrive\Documents\capstone_UI 825a9b374d8a:/var/www/html/capstone
cd /var/www/html/capstone/
pip install -r requirements.txt
docker commit 825a9b374d8a python:django-container

// running and using the container
docker run -it --rm -d -p 8000:8000 python:django-container
docker exec -it 9c40f60de9ed /bin/bash
python manage.py runserver 0.0.0.0:8000

############ production server docker setup with gunicorn

// add -D at end to make it a background process
gunicorn your_project.wsgi:application -c gunicorn_config.py
// make sure to run python manage.py collectstatic before running gunicorn
// run gunicorn when inside the docker container
gunicorn -b 0.0.0.0:8000 capstone_UI.wsgi:application

gunicorn -b :8000 --workers 3 --access-logfile - --error-logfile - capstone_UI.wsgi:application


####### APACHE ########
// setup apache docker container
docker run -d --name my-apache-container -p 80:80 httpd:latest
docker exec -it d46040f1ee37 /bin/bash
apt-get update
apt-get install apache2 -y nano
// below is for the ss tool
apt-get update && apt-get install -y iproute2

// creating network for apache and django to communicate
docker network create my-network

// run gunicorn container
docker run -d --name gunicorn-container --network my-network your-gunicorn-image

// run the apache container
docker run -d --name apache-container --network my-network -p 80:80 your-apache-image

// configure apache as a reverse proxy
docker exec -it apache-container bash
add Listen 8080 to /etc/apache2/ports.conf
add ServerName localhost to /etc/apache2/apache2.conf
// get container ip for proxypasses
docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' gunicorn-container
nano /etc/apache2/sites-available/reverse-proxy.conf
<VirtualHost *:80>
    ServerName localhost

    ProxyPass / http://gunicorn-container:8080/
    ProxyPassReverse / http://gunicorn-container:8080/
</VirtualHost>

    // enable the virtual host we just created
ln -s /etc/apache2/sites-available/reverse-proxy.conf /etc/apache2/sites-enabled/reverse-proxy.conf
    /// enable the proxy modules
a2enmod proxy
a2enmod proxy_http
add Include /etc/apache2/sites-available/reverse-proxy.conf to /etc/apache2/apache2.conf
    // restart apache
service apache2 restart

##### all the things ive done to try and fix the issue of not seeing gunicorn on apache
- added the gunicorn container to the same network as the apache container
- added staticfiles to reverse proxy configure
- checked the ip of the gunicorn container and apache containers and added them to allowed_hosts
- removed listen 80 and added listen 8080 in ports.conf
- changed 000-default.conf in sites-available to listen on 8080
- python manage.py collectstatic and added static to apache configure
- remapped the ports to 8080:8080 for apache
- changed allowed_hosts to ['*']
- checked errors at /var/log/apache2/error.log
- changing proxypass to include the name of the gunicorn container / 127.0.0.1:8000